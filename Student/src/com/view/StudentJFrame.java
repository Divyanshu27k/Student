   /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.control.StudentDao;
import com.model.Student;
import static com.sun.deploy.security.BlockedDialog.show;
import static com.sun.deploy.uitoolkit.impl.fx.ui.MixedCodeInSwing.show;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.runtime.Debug.id;
import static org.omg.CORBA.AnySeqHelper.id;
//import sun.net.www.MimeTable;


/**
 *
 * @author Divyanshu Kumar
 */
public class StudentJFrame extends javax.swing.JFrame {


    /**
     * Creates new form StudentJFrame
     */
   
    public StudentJFrame() {
        initComponents();
         StudentDao studentDao = new StudentDao();
        List<Student> studentList = studentDao.viewData();
        System.out.println("studentList::" + studentList.toString());

        DefaultTableModel TblModel = (DefaultTableModel) showTable.getModel();

        for (int i = 0; i < studentList.size(); i++) {
            Student student = (Student) studentList.get(i);
            TblModel.insertRow(showTable.getRowCount(), new Object[]{
                student.getId(),
                student.getName(),
                student.getMobile(),
                student.getAge(),
                student.getGender(),
                student.getAddress()
            });
        }

        // Add a mouse listener to the table for row selection
        showTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = showTable.getSelectedRow();
                if (selectedRow != -1) {
                    addbtn.setEnabled(false);
                    txtId.setEditable(false);
                    txtId.setText(showTable.getValueAt(selectedRow, 0).toString());
                    txtname.setText(showTable.getValueAt(selectedRow, 1).toString());
                    txtnumber.setText(showTable.getValueAt(selectedRow, 2).toString());
                    txtage.setText(showTable.getValueAt(selectedRow, 3).toString());
                    txtgender.setSelectedItem(showTable.getValueAt(selectedRow, 4).toString());
                    txtaddress.setText(showTable.getValueAt(selectedRow, 5).toString());
                }
            }
        });

        // Add a mouse listener to the frame to detect clicks outside the table
        getContentPane().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (!evt.getComponent().equals(showTable)) {
                    addbtn.setEnabled(true);
                    clearTableSelection();
                }
            }

            private void clearTableSelection() {
                showTable.clearSelection();
                cleartextfield();
                txtId.setEditable(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtage = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtaddress = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        showTable = new javax.swing.JTable();
        txtname = new javax.swing.JTextField();
        txtnumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        viewbtn = new javax.swing.JButton();
        txtgender = new javax.swing.JComboBox<>();
        addbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("NAME");

        jLabel3.setText("MOBILE NUMBER");

        jLabel4.setText("AGE ");

        jLabel5.setText("GENDER");

        txtaddress.setColumns(20);
        txtaddress.setRows(5);
        jScrollPane4.setViewportView(txtaddress);

        jLabel6.setText("ADDRESS");

        showTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "Mobile", "Age", "Gender", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        showTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(showTable);

        jLabel1.setText("ID");

        viewbtn.setText("View");
        viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbtnActionPerformed(evt);
            }
        });

        txtgender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "male", "female", "other" }));

        addbtn.setText("ADD");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(viewbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(updatebtn)
                        .addGap(45, 45, 45)
                        .addComponent(deletebtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtgender, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(103, 103, 103)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(addbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updatebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtgender, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(246, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void viewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbtnActionPerformed
        // TODO add your handling code here:
        ViewJFrame v=new ViewJFrame();
        v.setVisible(true);
    }//GEN-LAST:event_viewbtnActionPerformed

    private void showTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showTableMouseClicked
      
              addbtn.setEnabled(false);
              //addbtn.setEnabled(true);
        
       int selectedRow = showTable.getSelectedRow();
       txtId.setEditable(false);
       txtId.setText(showTable.getValueAt(selectedRow, 0).toString());
       txtname.setText(showTable.getValueAt(selectedRow, 1).toString());
       txtnumber.setText(showTable.getValueAt(selectedRow, 2).toString());
       txtage.setText(showTable.getValueAt(selectedRow, 3).toString());
       txtgender.setSelectedItem(showTable.getValueAt(selectedRow, 4).toString());
       txtaddress.setText(showTable.getValueAt(selectedRow, 5).toString());
       
    }//GEN-LAST:event_showTableMouseClicked

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        
         if (!validateInputs()) {
        return; // Exit if validation fails
    }

        Student std=new Student();       
        getFromUI(std);
        StudentDao studentDao = new StudentDao();
        if(studentDao.insertData(std)){
          JOptionPane.showMessageDialog(null,"Student inserted successfully");
               
              //  List studentlist=studentDao.viewData();
               // System.out.println("studentlist::"+studentlist.toString());
                
                DefaultTableModel TblModel =(DefaultTableModel)showTable.getModel();
                
                // for(int i = 0 ; i < studentlist.size() ; i++ ){
               // int last=studentlist.size();
                   //   Student student = (Student) studentlist.get(last);
                 TblModel.insertRow(showTable.getRowCount(), new Object[]{
                 
                 txtId.getText(),
                 txtname.getText(),
                 txtnumber.getText(),
                 txtage.getText(),
                 txtgender.getSelectedItem().toString(),
                 txtaddress.getText()
                
                });
  
                  Student stdnew = new Student();
                sendToUI(stdnew);
            //}  
        
        }   
    }//GEN-LAST:event_addbtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        // TODO add your handling code here:
        
        System.out.println("Delete button clecked!");
       
    //    addbtn.setEnabled(false);
          //txtId.setEnabled(false);
        
        
        int selectedRow= showTable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        return;
        }
        
        int id =Integer.parseInt(showTable.getValueAt(selectedRow, 0).toString());
    
        StudentDao dao=new StudentDao();
        int rowsAffected =dao.deleteData(id);
        if(rowsAffected>0){
            JOptionPane.showMessageDialog(this, "Student deleted successfully");
                  
            DefaultTableModel TblModel =(DefaultTableModel) showTable.getModel();
                  TblModel.removeRow(selectedRow);
            cleartextfield();
        }else{
            JOptionPane.showMessageDialog(this,"Failed to delete student");
        }
                    
    }//GEN-LAST:event_deletebtnActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        // TODO add your handling code here
        System.out.println("Upadte button clecked!");
        
      //  addbtn.setEnabled(false);
      if (!validateInputs()) {
        return; // Exit if validation fails
    }

        
        int selectedRow=showTable.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }
        
        int studentid= Integer.parseInt(showTable.getValueAt(selectedRow, 0).toString());
        
        Student student = new Student();
        getFromUI(student);
        StudentDao Dao = new StudentDao(); 
        
        int rowsAffected = Dao.updateData(student);
        if (rowsAffected >0){
            JOptionPane.showMessageDialog(this, "Student updated successfully!");
            
            DefaultTableModel TblModel=(DefaultTableModel) showTable.getModel();
            
            TblModel.setValueAt(student.getName(), selectedRow, 1);
            TblModel.setValueAt(student.getMobile(), selectedRow, 2);
            TblModel.setValueAt(student.getAge(),selectedRow , 3);
            TblModel.setValueAt(student.getGender(), selectedRow, 4);
            TblModel.setValueAt(student.getAddress(), selectedRow, 5);
            
            cleartextfield();
            

       }
    }//GEN-LAST:event_updatebtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        
     

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new StudentJFrame().setVisible(true);
        });
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable showTable;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextArea txtaddress;
    private javax.swing.JTextField txtage;
    private javax.swing.JComboBox<String> txtgender;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtnumber;
    private javax.swing.JButton updatebtn;
    private javax.swing.JButton viewbtn;
    // End of variables declaration//GEN-END:variables

      private Student getFromUI(Student st) {
        //Student st = new Student();
        if(!txtId.getText().isEmpty())
            st.setId(Integer.parseInt(txtId.getText()));
        else
            st.setId(0);
        
        if(!txtname.getText().isEmpty())
            st.setName(txtname.getText());
        else
            st.setName("");
         if(!txtage.getText().isEmpty())
             st.setAge(Integer.parseInt(txtage.getText()));
         else
             st.setAge(0);
         if(!txtnumber.getText().isEmpty())
             st.setMobile(txtnumber.getText());
         else
             st.setMobile("");
         
         if(!txtgender.getSelectedItem().toString().isEmpty())
             st.setGender(txtgender.getSelectedItem().toString());
         else
             st.setGender("");
         if(!txtaddress.getText().isEmpty())
            st.setAddress(txtaddress.getText());
         else
             st.setAddress("");
        return st;
    }
    private void sendToUI(Student student) {
        
        if(student.getId()>0){
            txtId.setText(String.valueOf(student.getId()));
        }
        else{
            txtId.setText("");
        }
        
        if(student.getName() !=null){
            txtname.setText(student.getName());
        }
        else{
            txtname.setText("");
        }
        if(student.getAge() >0){
            txtage.setText(String.valueOf(student.getAge()));
        }
        else{
            txtage.setText("");
        }
        if(student.getMobile()!=null){
            txtnumber.setText(student.getMobile());
        }
        else{
            txtnumber.setText("");
        }
        if(student.getGender()!=null){
            txtgender.setSelectedItem(student.getGender());
        }
        else{
            txtgender.setSelectedItem("");
        }
        if(student.getAddress()!=null){
             txtaddress.setText(student.getAddress());
        }
        else{
            txtaddress.setText("");
        }
       
    
    }

    private void cleartextfield() {txtId.setText("");
    txtname.setText("");
    txtnumber.setText("");
    txtage.setText("");
    txtgender.setSelectedIndex(0); // Reset the JComboBox (if it's a dropdown)
    txtaddress.setText("");
    }

//  private void loadTableData() {
//        
//       StudentDao studentDao = new StudentDao();
//    List<Student> studentList = studentDao.viewData();
//
//    DefaultTableModel TblModel = (DefaultTableModel) showTable.getModel();
//
//    TblModel.setRowCount(0);
//
//    for (Student student : studentList) {
//        TblModel.addRow(new Object[]{
//            student.getId(),
//            student.getName(),
//            student.getMobile(),
//            student.getAge(),
//            student.getGender(),
//            student.getAddress()
//            });

    private boolean validateInputs() {
         if (txtId.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID cannot be empty.");
        txtId.requestFocus();
        return false;
    }
    try {
        Integer.parseInt(txtId.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID must be a number.");
        txtId.requestFocus();
        return false;
    }

    
    if (txtname.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Name cannot be empty.");
        txtname.requestFocus();
        return false;
    }
    if (!txtname.getText().matches("[a-zA-Z ]+")) {
        JOptionPane.showMessageDialog(this, "Name must contain only letters.");
        txtname.requestFocus();
        return false;
    }

    
    if (txtnumber.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Mobile number cannot be empty.");
        txtnumber.requestFocus();
        return false;
    }
    if (!txtnumber.getText().matches("\\d{10}")) {
        JOptionPane.showMessageDialog(this, "Mobile number must be 10 digits.");
        txtnumber.requestFocus();
        return false;
    }

    
    if (txtage.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Age cannot be empty.");
        txtage.requestFocus();
        return false;
    }
    try {
        int age = Integer.parseInt(txtage.getText());
        if (age < 1 || age > 120) {
            JOptionPane.showMessageDialog(this, "Age must be between 1 and 120.");
            txtage.requestFocus();
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Age must be a number.");
        txtage.requestFocus();
        return false;
    }

    if (txtgender.getSelectedItem() == null || txtgender.getSelectedItem().toString().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a gender.");
        txtgender.requestFocus();
        return false;
    }

  
    if (txtaddress.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Address cannot be empty.");
        txtaddress.requestFocus();
        return false;
    }
    if (txtaddress.getText().length() > 200) {
        JOptionPane.showMessageDialog(this, "Address cannot be longer than 200 characters.");
        txtaddress.requestFocus();
        return false;
    }

    return true; 
    }

}

  
